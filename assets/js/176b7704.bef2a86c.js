"use strict";(self.webpackChunkboehs_com=self.webpackChunkboehs_com||[]).push([[9476],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),g=o,m=u["".concat(s,".").concat(g)]||u[g]||d[g]||a;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},3159:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={},i="Adding a Custom Postgres Type in Rails 4.2",l={permalink:"/blog/2015/09/17/adding-a-custom-postgres-type-in-rails-4-2.html",source:"@site/blog/2015-09-17-adding-a-custom-postgres-type-in-rails-4-2.html.md",title:"Adding a Custom Postgres Type in Rails 4.2",description:"In a Rails app at work, we are using a PostGIS data type of geometry and we were getting this warning in our logs:",date:"2015-09-17T00:00:00.000Z",formattedDate:"September 17, 2015",tags:[],readingTime:1.04,hasTruncateMarker:!0,authors:[],frontMatter:{},prevItem:{title:"Audio Gear",permalink:"/blog/2020/01/28/audio-gear"},nextItem:{title:"Configuring Pow including SSL",permalink:"/blog/2015/01/20/configuring-pow-including-ssl.html"}},s={authorsImageUrls:[]},p=[],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In a Rails app at work, we are using a PostGIS data type of ",(0,o.kt)("inlineCode",{parentName:"p"},"geometry")," and we were getting this warning in our logs:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"unknown OID 16391: failed to recognize type of 'geo'. It will be treated as String.\n")),(0,o.kt)("p",null,"This is because by default, Active Record doesn't support the OID 16391 for this data type. We can add our own in Rails 4.1 as ",(0,o.kt)("a",{parentName:"p",href:"http://www.innovationontherun.com/fixing-unknown-oid-geography-errors-with-postgis-and-rails-4-0/"},"recommended by Rob Di Marco"),"."),(0,o.kt)("p",null,"In Rails 4.2, the OID module got reworked a bit and that solution doesn't work anymore. Well Rob helps as again by ",(0,o.kt)("a",{parentName:"p",href:"http://www.innovationontherun.com/adding-a-custom-postgresql-type-with-rails-4-2/"},"recommending a new solution for Rails 4.2"),". The site isn't loading for me so I pulled the code from Google Cache, cleaned it up a little and represent it to you here."),(0,o.kt)("p",null,"In ",(0,o.kt)("inlineCode",{parentName:"p"},"config/initializers/add_custom_oid_types_to_active_record.rb"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},"# ActiveRecrod will `warn` (to stdout) when first connecting to the adapter:\n#  unknown OID 16391: failed to recognize type of 'geo'. It will be treated as...\n\n# Registering the `geometry` type (typically not supported by Active Record) will\n# prevent this warning but AR will continue to treat it the same. This cleans up\n# logs and test output.\n\nActiveRecord::ConnectionAdapters::PostgreSQLAdapter.class_eval do\n  def initialize_type_map_with_postgres_oids mapping\n    initialize_type_map_without_postgres_oids mapping\n    register_class_with_limit mapping, 'geometry',\n      ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Integer\n  end\n\n  alias_method_chain :initialize_type_map, :postgres_oids\nend\n")))}d.isMDXComponent=!0}}]);