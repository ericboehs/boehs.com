"use strict";(self.webpackChunkboehs_com=self.webpackChunkboehs_com||[]).push([[2692],{6338:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2021/10/28/rails-cdn-and-active-storage","metadata":{"permalink":"/boehs.com/blog/2021/10/28/rails-cdn-and-active-storage","source":"@site/blog/2021-10-28-rails-cdn-and-active-storage.md","title":"Rails CDN and ActiveStorage","description":"When serving assets and attachments from Rails and ActiveStorage, a CDN is a great way to reduce load on your web server and speed up content delivery to your users.","date":"2021-10-28T00:00:00.000Z","formattedDate":"October 28, 2021","tags":[],"readingTime":3.105,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"nextItem":{"title":"MacBook Pro Battery Drain","permalink":"/boehs.com/blog/2021/10/24/macbook-pro-battery-drain"}},"content":"When serving assets and attachments from Rails and ActiveStorage, a CDN is a great way to reduce load on your web server and speed up content delivery to your users.\\n\\n## Asset CDN\\n\\nFirst, even if you\'re not using ActiveStorage, you\'ll want to set up a CDN to stand in front of your app. This will proxy requests for images, fonts, javascripts, and stylesheets that live in your app\'s repository.\\n\\nThe ideal setup here is to serve your assets from your app, set a high cache-expiration, and serve your assets through a CDN.\\n\\n### Setting up your Asset CDN\\n\\nFor a CDN, I recommend Amazon CloudFront. You\'ll want to create a web distribution which points at the root of your app. Heroku [has a good guide][2] on that.\\n\\n\x3c!-- truncate --\x3e\\n\\nOnce it\'s set up, set an environment variable[^1] (e.g. `ASSET_HOST`) to the distribution domain name and configure your `asset_host`. Also, set a long expiration for your assets. In `config/environments/production.rb` [^2] [^3]:\\n\\n```ruby\\n# Tell our CDN and browser to cache assets for a year.\\nconfig.public_file_server.headers = { \'Cache-Control\' => \'public, max-age=31536000\' }\\n\\n# Serve images, stylesheets, and javascripts from an asset server.\\nconfig.action_controller.asset_host = ENV[\'ASSET_HOST\']\\n```\\n\\nOnce you\'ve configured the above, your production assets should serve from your CloudFront CDN.\\n\\nFor more information, on serving assets, caching, and cache invalidation, see the [Rails Guides][1].\\n\\n---\\n\\n## ActiveStorage Attachments served through a CDN\\n\\nWhen you serve attachments from a cloud storage service (I\'m using S3), it will be coming from a different domain than your app. One solution to this would be to [stream the file contents through your app][4].\\n\\nI opted for creating a second CDN distribution that sits in front of the cloud storage provider that ActiveStorage serves for its 302 redirect [^4]. This does require a little configuration. Thankfully nothing needs to be monkey patched.\\n\\n1. Create a second CloudFront web distribution that points to your S3 bucket and point your `ATTACHMENT_HOST` env variable at it (prepended with https://).\\n1. In `lib/active_storage/service/s3_directory_service.rb`, create the service in [this gist][5].\\n1. In `config/environment/production.rb`, set ActiveStorage\'s `service_urls_expire_in` :\\n\\n\\t```ruby\\n\\t# Tell our CDN and browser to cache attachments for a year.\\n\\tconfig.active_storage.service_urls_expire_in = 1.year\\n\\t```\\n1. In config/storage.yml, configure the service and default `cache_control` for uploaded attachments [by adding the upload key][6] [^5]:\\n\\n\\t```yaml\\n\\tamazon:\\n\\t  service: S3Directory\\n\\t  # ...\\n\\t  upload:\\n\\t    cache_control: \'public, max-age=31536000\'\\n\\t```\\n1. When linking to the attachments, use the `rails_blob_url` helper like so: [^6] \\n\\n\\t```ruby\\n\\trails_blob_url user.avatar, host: ENV[\'ASSET_HOST\']\\n\\t```\\n\\t(For variants, you\'ll need to call `rails_representation_url` instead.)\\n\\nNow your ActiveStorage attachments will serve through the two CDNs: the first request will hit Rails\' Representations or Blob controller (through the Asset CDN) which will redirect to the service url for the attachment (through the Attachment CDN). If this attachment has been served to a previous user, no request will hit your web server as CloudFront will have it in its cache. If that user has requested the attachment before, it well be served from the browser\'s memory and no request will be made.[^7]\\n\\n[^1]:\\tPrepend the host with https://.\\n\\n[^2]:\\tIf you\'re using Heroku Review Apps, you\'ll want to conditionally use `ENV[\'HEROKU_APP_NAME\']` based on `ENV[\'HEROKU_PARENT_APP_NAME\']`.\\n\\n[^3]:\\tYou may also want to [set your mailers\' asset host][3].\\n\\n[^4]:\\tSee Rails\' Representation and Variants controller to see how that works.\\n\\n[^5]:\\tIf you already have ActiveStorage attachments uploaded in production, you can make them public and add a cache-control header [by using aws cli tools][7].\\n\\n[^6]:\\tYou may want to create a helper method to make this a little cleaner.\\n\\n[^7]:\\tThe same is true for your assets and the Asset CDN.\\n\\n[1]:\\thttps://guides.rubyonrails.org/asset_pipeline.html#cdns-and-the-cache-control-header\\n[2]:\\thttps://help.heroku.com/8JTD2TJ6/how-should-i-configure-cloudfront-to-work-with-heroku\\n[3]:\\thttps://guides.rubyonrails.org/action_mailer_basics.html#adding-images-in-action-mailer-views\\n[4]:\\thttps://github.com/rails/rails/issues/31419#issuecomment-399118697 \\"on Jun 21, 2018\\"\\n[5]:\\thttps://gist.github.com/ericboehs/59ff72b7beeb2724a0979247d0fe7541\\n[6]:\\thttps://stackoverflow.com/a/58290203\\n[7]:\\thttps://stackoverflow.com/a/30225271"},{"id":"/2021/10/24/macbook-pro-battery-drain","metadata":{"permalink":"/boehs.com/blog/2021/10/24/macbook-pro-battery-drain","source":"@site/blog/2021-10-24-macbook-pro-battery-drain/index.md","title":"MacBook Pro Battery Drain","description":"My main computer is my iMac. It seemed like every time I opened my MacBook Pro, it would show this screen:","date":"2021-10-24T00:00:00.000Z","formattedDate":"October 24, 2021","tags":[],"readingTime":0.925,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"prevItem":{"title":"Rails CDN and ActiveStorage","permalink":"/boehs.com/blog/2021/10/28/rails-cdn-and-active-storage"},"nextItem":{"title":"Ping Tools in macOS","permalink":"/boehs.com/blog/2021/10/23/ping-tools-in-macos"}},"content":"My main computer is my iMac. It seemed like every time I opened my MacBook Pro, it would show this screen:\\n\\n![MacBook Pro showing low battery full screen](macbook-low-battery.jpg)\\n\\nSo I researched a bit and fixed it. Here\'s what I did:\\n\\n\x3c!-- truncate --\x3e\\n\\n* **Turn off \\"PowerNap while on battery power\\"**. This is the Energy preference pane.\\n* **Turn off \\"Allow Bluetooth devices to wake this computer\\"**. This is in the Bluetooth preference pane under Advanced.\\n\\nThat\'s it.\\n\\n---\\n\\nNow, when I open my MacBook the battery has barely moved from the previous day. For example, 3 days ago I closed my laptop with 64% battery. I opened it this morning with 50% battery. A 5%/day battery drain is excellent for a computer that\'s keeping its running memory actively powered. Previously I\'d see what seemed to be 5%/hour (I didn\'t actually measure it but rarely did I open my laptop and it wasn\'t dead). \\n\\nIf you want to track your battery usage, check out [iStat Menus](https://bjango.com/mac/istatmenus/). It has a graph to show battery drain over time (past hour, day, week, month).\\n\\n![iStat Menus Battery Screenshot](istat-battery-screenshot.png)"},{"id":"/2021/10/23/ping-tools-in-macos","metadata":{"permalink":"/boehs.com/blog/2021/10/23/ping-tools-in-macos","source":"@site/blog/2021-10-23-ping-tools-in-macos/index.md","title":"Ping Tools in macOS","description":"I was looking for an outbound ping tool that I could run continuously on a secondary monitor or in the background so I could quickly troubleshoot internet outages or packet loss.","date":"2021-10-23T00:00:00.000Z","formattedDate":"October 23, 2021","tags":[],"readingTime":1.18,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"prevItem":{"title":"MacBook Pro Battery Drain","permalink":"/boehs.com/blog/2021/10/24/macbook-pro-battery-drain"},"nextItem":{"title":"Instant Google Results in Alfred","permalink":"/boehs.com/blog/2020/09/07/instant-google-results-in-alfred"}},"content":"I was looking for an outbound ping tool that I could run continuously on a secondary monitor or in the background so I could quickly troubleshoot internet outages or packet loss.\\n\\nFor example, when I\'m in a video call, if the other person starts to have issues with audio/video, I can, with a glance, tell if it\'s me or not by looking for latency/packet loss amongst the hosts I\'m pinging.\\n\\n**[ICMPUtil][1] is the best I\'ve found.** It\'s $6 [on the App Store][2].\\n\\n![Screenshot of ICMPUtil](./icmputil.png)\\n\\n\x3c!-- truncate --\x3e\\n\\nI recommend setting it to use a **1 second ping interval with a 64 byte payload**. 0.1 second pings look cool but many servers including google.com won\'t respond to ICMP that quickly. The default payload of 32 bytes is half the default value for a typical ping command so results may differ slightly if you don\'t use 64 bytes.\\n\\nAdd several hosts so if there\'s an outage with your internet, you\'ll see all hosts aren\'t responding. If there\'s just an issue with say Google or AWS then multiple hosts could fail but it\'s not your internet.\\n\\n## Other Tools\\n\\nSome other options:\\n\\n* [mtr][3] - This is a traceroute terminal app that continually pings each host in a traceroute\\n* [autoping][4] - GUI mac app I used to use; no longer available though\\n\\n[1]: \\thttp://www.ermitacode.com/icmputil.html \\"ICMPUtil\\"\\n[2]:\\thttps://apps.apple.com/us/app/icmputil/id866965011?mt=12 \\"on the App Store\\"\\n[3]:\\thttps://formulae.brew.sh/formula/mtr \\"mtr\\"\\n[4]:\\thttps://sixcolors.com/post/2015/02/autoping-keeps-an-eye-on-my-network/ \\"autoping\\""},{"id":"/2020/09/07/instant-google-results-in-alfred","metadata":{"permalink":"/boehs.com/blog/2020/09/07/instant-google-results-in-alfred","source":"@site/blog/2020-09-07-instant-google-results-in-alfred.md","title":"Instant Google Results in Alfred","description":"I\'ve been searching for a solution to allow me to instantly search Google from anywhere on my Mac. My goal is to access the result I want as fast as possible.","date":"2020-09-07T00:00:00.000Z","formattedDate":"September 7, 2020","tags":[],"readingTime":1.445,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"prevItem":{"title":"Ping Tools in macOS","permalink":"/boehs.com/blog/2021/10/23/ping-tools-in-macos"},"nextItem":{"title":"Monitoring my Internet Connection with Speedtest-cli","permalink":"/boehs.com/blog/2020/09/06/monitoring-my-internet-connection-with-speedtest-cli"}},"content":"I\'ve been searching for a solution to allow me to instantly search Google from anywhere on my Mac. My goal is to access the result I want as fast as possible.\\n\\nMy previous solution was to use the default fallback search in Alfred. I hit `Option-Space` typed my search and pressed `Enter`. This was pretty good. It would open Safari with my query\'s Google results. The page would take two seconds to load and then I\'d have to figure out how to select the result I wanted.\\n\\nIdeally, I\'d just press 1, 2, 3, etc on my keyboard to launch the corresponding result. But the closest I could find was a vim-like browser plugin (such as [Vimari](https://github.com/televator-apps/vimari)) which gives all links a letter combination to type to navigate to it. Or [Shortcat](https://shortcatapp.com), which I use for navigating all macOS UI.[^1]\\n\\nThis solution wasn\'t fast enough for me though. I wanted a more modal experience where I hop into an ephemeral search session.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Enter googler\\n\\nIn my search for instantly navigating Google results, I came across [googler](https://github.com/jarun/googler) which displays google results on the command line. You can type a number followed by `Enter` and it opens your default browser to that result. Getting closer.\\n\\nAfter looking for an existing solution and turning up empty, I decided to make my own via Alfred Workflows.\\n\\nI really liked `googler` and essentially wanted to interface with it through Alfred. So I picked up my favorite programming language, and started writing. The end result is [Alfred googler](https://github.com/ericboehs/alfred-googler). Here\'s a demo:\\n\\n![demo gif](https://github.com/ericboehs/alfred-googler/raw/master/demo.gif)\\n\\nCheck out the [README](https://github.com/ericboehs/alfred-googler#readme) for info on installation and features.\\n\\n[^1]: There\'s an alternative to Shortcat called [Vimac](https://vimacapp.com/) but I still prefer Shortcat even though it\'s not maintained."},{"id":"/2020/09/06/monitoring-my-internet-connection-with-speedtest-cli","metadata":{"permalink":"/boehs.com/blog/2020/09/06/monitoring-my-internet-connection-with-speedtest-cli","source":"@site/blog/2020-09-06-monitoring-my-internet-connection-with-speedtest-cli.md","title":"Monitoring my Internet Connection with Speedtest-cli","description":"I wanted to log my internet\'s upload and download speeds over time. brew search speed turned up speedtest-cli which uses speedtest.net servers to measure what I was interested in.","date":"2020-09-06T00:00:00.000Z","formattedDate":"September 6, 2020","tags":[],"readingTime":1.24,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"prevItem":{"title":"Instant Google Results in Alfred","permalink":"/boehs.com/blog/2020/09/07/instant-google-results-in-alfred"},"nextItem":{"title":"Configuring a Heroku Review App to use another apps database","permalink":"/boehs.com/blog/2020/03/05/configuring-a-heroku-review-app-to-use-another-apps-database"}},"content":"I wanted to log my internet\'s upload and download speeds over time. `brew search speed` turned up `speedtest-cli` which uses speedtest.net servers to measure what I was interested in.\\n\\nUnfortunately it\'s a one time test and if you want it to repeat, you\'ll need to automate it. I chose a simple shell `while` loop to handle this for me[^1]:\\n\\n```bash\\nwhile; do\\n  speedtest-cli --json --server $(\\n    speedtest-cli --list |\\n    grep -E \\"CenturyLink|Sprint|Enid|OneNet|Cox|Suddenlink\\" |\\n    head -20 |\\n    cut -f 1 -d \')\' |\\n    sort -R | head -1\\n  ) | tee -a speedtest-log.json\\n  sleep 600\\n  clear\\ndone\\n```\\n\\nThis checks a random nearby server every 10 minutes.\\n\\n\x3c!-- truncate --\x3e\\n\\nThe `$(...)` subshell is what finds a random server (`speedtest-cli` outputs in order of distance). The `grep` limits it to internet providers I\'ve heard of[^2]. `tee` outputs to stdout as well as a log file so I can see the results without having to `tail` the json log.\\n\\nI run this in a tmux session dedicated to monitoring my internet (I run 2ping, mtr, and httping here as well).\\n\\nThe results are append to the log as one test run per line so it\'s a little terse to read. I may end up writing a Sinatra app to display the results in a more human readable format.\\n\\n[^1]:\\tI don\'t recommend running this on a laptop as you may forget about it when you tether to your phone\'s data plan.\\n[^2]: Feel free to adjust this to your preference."},{"id":"/2020/03/05/configuring-a-heroku-review-app-to-use-another-apps-database","metadata":{"permalink":"/boehs.com/blog/2020/03/05/configuring-a-heroku-review-app-to-use-another-apps-database","source":"@site/blog/2020-03-05-configuring-a-heroku-review-app-to-use-another-apps-database.md","title":"Configuring a Heroku Review App to use another apps database","description":"In certain scenarios, I\'ve found it useful to use our production app\'s Read Replica as a source for manual testing. It\'s not something I\'m reaching for often but there are definitely cases where our seed data just doesn\'t cut it.","date":"2020-03-05T00:00:00.000Z","formattedDate":"March 5, 2020","tags":[],"readingTime":1.41,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"prevItem":{"title":"Monitoring my Internet Connection with Speedtest-cli","permalink":"/boehs.com/blog/2020/09/06/monitoring-my-internet-connection-with-speedtest-cli"},"nextItem":{"title":"Resolving Brakeman Errors","permalink":"/boehs.com/blog/2020/03/03/resolving-brakeman-errors"}},"content":"In certain scenarios, I\'ve found it useful to use our production app\'s Read Replica as a source for manual testing. It\'s not something I\'m reaching for often but there are definitely cases where our seed data just doesn\'t cut it.\\n\\nSince it\'s a read replica, no writes can be made to it and I don\'t have to worry (too much) about harming production. You\'ll want to make sure any external user operations aren\'t configured to happen automatically (e.g. sending email, cropping avatars, etc).\\n\\n## Destroy\\n\\nIn order to assign a different `DATABASE_URL` to a review app, you\'ll need to destroy the postgres attachment on your review app. I knock this out by chaining some commands together:\\n\\n\x3c!-- truncate --\x3e\\n\\n```bash\\nheroku addons:destroy $(heroku addons:info heroku-postgresql -a your_review_app | grep \'===\' | awk \'{print $2}\') -a your_review_app\\n```\\n\\nThe sub-command here is getting the name of the add-on (e.g. postgresql-concentric-04442) and passing it to `heroku addons:destroy`.[^1]\\n\\n## Configure\\n\\nNow that we\'ve gotten rid of that pesky, old database, we can set the `DATABASE_URL` on our review app. I also have a banger of a command for this:\\n\\n```bash\\nheroku config:set DATABASE_URL=\\"$(heroku config:get HEROKU_POSTGRESQL_PURPLE_URL -r production)\\" -a your_review_app\\n```\\n\\nIn order to know what to substitute in for `HEROKU_POSTGRESQL_PURPLE_URL` in your setup, run:[^2]\\n```bash\\nheroku pg:info -r production | grep Followers \\n```\\nUse your discretion to determine your read-replica.\\n\\n## Relish\\n\\nThat\'s it. In my case, my app was rebooted and it read the `DATABASE_URL` without a problem. If your app tries to do writes, it will most likely throw an exception.\\n\\n[^1]:\\tOf course, don\'t put your production app\'s name in this one. \ud83d\ude02\ud83d\ude31\\n\\n[^2]:\\tAssuming you\'re using a read replica from Heroku"},{"id":"/2020/03/03/resolving-brakeman-errors","metadata":{"permalink":"/boehs.com/blog/2020/03/03/resolving-brakeman-errors","source":"@site/blog/2020-03-03-resolving-brakeman-errors.md","title":"Resolving Brakeman Errors","description":"After running brakeman you\'ll get a report and, if there are new warnings, it will exit with a status code of \\"3\\". Typically, I only see two types of output from Brakeman. Either a large report where there are new warnings or a short report which is saying Brakeman is out of date.","date":"2020-03-03T00:00:00.000Z","formattedDate":"March 3, 2020","tags":[],"readingTime":2.1,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"prevItem":{"title":"Configuring a Heroku Review App to use another apps database","permalink":"/boehs.com/blog/2020/03/05/configuring-a-heroku-review-app-to-use-another-apps-database"},"nextItem":{"title":"Audio Gear","permalink":"/boehs.com/blog/2020/01/28/audio-gear"}},"content":"After running `brakeman` you\'ll get a report and, if there are new warnings, it will exit with a status code of \\"3\\". Typically, I only see two types of output from Brakeman. Either a large report where there are new warnings or a short report which is saying Brakeman is out of date.\\n\\nI\'ll briefly explain resolving both.\\n\\n## Resolving New Warning(s) Detected\\n\\nThe long report.\\n\\nRun `brakeman -I` to get an interactive console for ignoring warnings. It will analyze your code base and then prompt you for where to find the ignore file. I\'ve always used the default location of `config/brakeman.ignore`, so I simply press `Enter` to accept the default.\\n\\n\x3c!-- truncate --\x3e\\n\\nThen I almost always choose option `2` to \\"Hide previously ignored warnings\\". This option is a bit confusing. It\'s the same as option 1 but doesn\'t show warnings you\'ve already ignored.\\n\\nAt this point, brakeman will iterate over each new warning prompting you to ignore the warning. This is a critical point in your role here. **You need to make sure the warning should be ignored or fixed.** If this is a positive warning, you need to `Ctrl-C` right now and go fix the code rather than ignoring the vulnerability. If it is a false-positive, you can ignore it here via `i` or `n`. I recommend `n` because it prompts for a note as to why this warning is a false-positive.\\n\\nAfter you have resolved all warnings, it will (optionally) prompt you to remove fingerprints (outdated warnings). You need to input `y` or `yes` here for it to actually remove the fingerprints.\\n\\nFinally, you\'ll want to save changes via `1` and, due to amnesia or disorder, Brakeman will again ask you where the ignore file is. I again just press `Enter` because I use the default location. (I have no idea why the input and output would be in different locations.)\\n\\nYou can run `brakeman` again and it should report \\"No warnings found\\". You\'re all ready to check the ignore file into source control and push it up to your CI.\\n\\n## Brakeman\'s Out of Date\\n\\nThe short report.\\n\\nThis only appears if you\'re running `brakeman --enusre-latest` (which I highly recommend).\\n\\nTo fix, simply run `bundle update brakeman`. This will update your `Gemfile.lock` which is all you should need to change.\\n\\nIf you are locking brakeman in your `Gemfile` (which I don\'t recommend), you should check Brakeman\'s [CHANGES][1] to make sure the new changes don\'t break whatever you\'re guarding against with the version locking.\\n\\n[1]:\\thttps://github.com/presidentbeef/brakeman/blob/master/CHANGES.md"},{"id":"/2020/01/28/audio-gear","metadata":{"permalink":"/boehs.com/blog/2020/01/28/audio-gear","source":"@site/blog/2020-01-28-audio-gear.md","title":"Audio Gear","description":"If you would like to have great, clean sounding audio in your meetings, podcasts, or videos. Purchase the microphone and","date":"2020-01-28T00:00:00.000Z","formattedDate":"January 28, 2020","tags":[],"readingTime":3.65,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"prevItem":{"title":"Resolving Brakeman Errors","permalink":"/boehs.com/blog/2020/03/03/resolving-brakeman-errors"},"nextItem":{"title":"Adding a Custom Postgres Type in Rails 4.2","permalink":"/boehs.com/blog/2015/09/17/adding-a-custom-postgres-type-in-rails-4-2.html"}},"content":"If you would like to have great, clean sounding audio in your meetings, podcasts, or videos. Purchase the microphone and\\naudio interface that I recommend and use below.\\n\\n## Microphone\\n\\nI use the [Audio-Technica AT875R](https://amazon.com/dp/B000BQ79W0) shotgun microphone.\\n\\nI place it 3-5 inches from my mouth using a boom arm attached to my desk. Since I type on that desk, I use a shock\\nmount.\\n\\nSince this is a shotgun mic, it works great from a distance. I can position the mic about 6-8 inches from my mouth\\nto get it out of a video head shot which I use for meetings (I have enough room for a lower third with this shot; \\nabout a 35mm focal length). But, for best sound, place it only a fist-full away.\\n\\n## Audio Interface\\n\\nSince most microphones in this category do not have USB, you will need an interface to connect it to your\\ncomputer.\\n\\n\x3c!-- truncate --\x3e\\n\\nI recommend the [Behringer UMC204HD](https://amazon.com/dp/B00QHURLCW) audio interface. I have the 404HD which has four inputs\\ninstead of two. I have yet to use more than two inputs though.\\n\\nMany podcasters like the Focusrite Scarlett interfaces but these cannot be muted by apps like Shush (see below)\\nand therefore I cannot recommend them.\\n\\n## Boom Arm\\n\\nThe microphone I recommend doesn\'t come with a stand. In my setup, I have a [Rode PSA1 Boom\\narm](https://amazon.com/dp/B001D7UYBO). It\'s fine but if it ever breaks I\'ll probably purchase a [Blue\\nCompass](https://amazon.com/dp/B078MLBGRM) purely for asthetics. Neewer makes [a cheap boom arm](https://amazon.com/dp/B00DY1F2CS)\\nbut I haven\'t tried it.\\n\\n## Shock Mount\\n\\nSince I\'m typing/bumping the desk I sit at, I got a [shock mount](https://amazon.com/dp/B00KXQIU5S) which works great with my\\nmicrophone.\\n\\n## XLR Cable\\nNone of the aforementioned products come with an XLR cable. If you\'re using a boom arm you will probably need 6-15ft of\\nXLR cable. I went with [a 10ft cable from Planet Waves](https://amazon.com/dp/B0002GML68). I had a little cable to spare.\\n\\n## Shush - Digital Cough Drop\\n\\nWhen you\'re in a meeting or apart of a live event, you\'ll eventually need to cough or sneeze or the dog starts barking\\nor something else will happen, and you will want to mute your microphone quickly. For this case, I highly recommend the\\n$5 app [Shush from Mizage](http://mizage.com/shush).\\n\\nIn Push-to-Silence mode, I have a single hot key that I can hold to mute myself. Great for using as a digital [cough drop](https://amazon.com/dp/B00WOK8IOO). Double-press my hot key and it switches modes. Now, in Push-to-Talk mode, I can hold my hot key to talk to my guests (great when I\'m in a large group and I don\'t need to talk a lot). Double-press it again and I\'m back to Push-to-Silence mode.\\n\\nI do recommend turning off the sounds Shush makes which means you have to rely on the status bar icon to know if you\'re\\nmuted.\\n\\n## Monitoring Headphones\\n\\nYou\'ll want some closed backed headphones if you are going to be recording audio for others to listen to. You\'ll want\\nclosed backed headphones so that audio doesn\'t leak into your microphone. I\'ve heard good things about the [Sony\\nMDR7506](https://amazon.com/dp/B000AJIF4E). I personally use the [Shure SE215](https://amazon.com/dp/B07WLN43K3) as they are in-ear\\nmonitors which aren\'t so obnoxious on camera.\\n\\n## Too expensive for you?\\n\\nAnother option to all of the above is a USB microphone and some wired earbuds. The [Audio-Technica\\nATR2100x-USB](https://www.amazon.com/dp/B07ZPBFVKK) is a hand-held mic that comes with a stand. It has a standard headphone jack for\\naudio monitoring and will work as an audio output so you can hear yourself and your computer\'s audio in your headphones. It also has an XLR port so if\\nyou wanted to slowly upgraded into a boom arm, usb interface, and so on, you could do so without having to buy a new\\nmicrophone. I haven\'t used it personally.\\n\\n(This could be a good mobile solution as well.)\\n\\n## Find yourself saying \\"I have too much money\\" or \\"I want more options\\"?\\n\\nCheck out Marco Arment\'s [Podcasting Microphones Mega-Review](https://marco.org/podcasting-microphones). He uses a $250\\nmicrophone with a $880 USB Interface and $1300 headphones with a $850 headphone amp.\\n\\nWhile he does have pricey tastes, don\'t let that steer you away from his mega-review. He reviews almost two dozens mics,\\nranging from $10-900,\\nwith multiple sound recordings from each. If you want to research this rather than take my opinion, look no further. And\\nif you do, check out [Podcastage\'s YouTube Channel](https://www.youtube.com/channel/UCvOU-zTlankT-JjN3ZzvuKA)."},{"id":"/2015/09/17/adding-a-custom-postgres-type-in-rails-4-2.html","metadata":{"permalink":"/boehs.com/blog/2015/09/17/adding-a-custom-postgres-type-in-rails-4-2.html","source":"@site/blog/2015-09-17-adding-a-custom-postgres-type-in-rails-4-2.html.md","title":"Adding a Custom Postgres Type in Rails 4.2","description":"In a Rails app at work, we are using a PostGIS data type of geometry and we were getting this warning in our logs:","date":"2015-09-17T00:00:00.000Z","formattedDate":"September 17, 2015","tags":[],"readingTime":1.04,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"prevItem":{"title":"Audio Gear","permalink":"/boehs.com/blog/2020/01/28/audio-gear"},"nextItem":{"title":"Configuring Pow including SSL","permalink":"/boehs.com/blog/2015/01/20/configuring-pow-including-ssl.html"}},"content":"In a Rails app at work, we are using a PostGIS data type of `geometry` and we were getting this warning in our logs:\\n\\n```\\nunknown OID 16391: failed to recognize type of \'geo\'. It will be treated as String.\\n```\\n\\nThis is because by default, Active Record doesn\'t support the OID 16391 for this data type. We can add our own in Rails 4.1 as [recommended by Rob Di Marco](http://www.innovationontherun.com/fixing-unknown-oid-geography-errors-with-postgis-and-rails-4-0/).\\n\\n\x3c!-- truncate --\x3e\\n\\nIn Rails 4.2, the OID module got reworked a bit and that solution doesn\'t work anymore. Well Rob helps as again by [recommending a new solution for Rails 4.2](http://www.innovationontherun.com/adding-a-custom-postgresql-type-with-rails-4-2/). The site isn\'t loading for me so I pulled the code from Google Cache, cleaned it up a little and represent it to you here.\\n\\nIn `config/initializers/add_custom_oid_types_to_active_record.rb`:\\n\\n```ruby\\n# ActiveRecrod will `warn` (to stdout) when first connecting to the adapter:\\n#  unknown OID 16391: failed to recognize type of \'geo\'. It will be treated as...\\n\\n# Registering the `geometry` type (typically not supported by Active Record) will\\n# prevent this warning but AR will continue to treat it the same. This cleans up\\n# logs and test output.\\n\\nActiveRecord::ConnectionAdapters::PostgreSQLAdapter.class_eval do\\n  def initialize_type_map_with_postgres_oids mapping\\n    initialize_type_map_without_postgres_oids mapping\\n    register_class_with_limit mapping, \'geometry\',\\n      ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::OID::Integer\\n  end\\n\\n  alias_method_chain :initialize_type_map, :postgres_oids\\nend\\n```"},{"id":"/2015/01/20/configuring-pow-including-ssl.html","metadata":{"permalink":"/boehs.com/blog/2015/01/20/configuring-pow-including-ssl.html","source":"@site/blog/2015-01-20-configuring-pow-including-ssl.html.md","title":"Configuring Pow including SSL","description":"I used pow in the past and didn\'t like it. I\'ve given it a second chance and it seems to be working out. I\'d like to give Invoker a try though but I\'ll save that for another day.","date":"2015-01-20T00:00:00.000Z","formattedDate":"January 20, 2015","tags":[],"readingTime":2.81,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"prevItem":{"title":"Adding a Custom Postgres Type in Rails 4.2","permalink":"/boehs.com/blog/2015/09/17/adding-a-custom-postgres-type-in-rails-4-2.html"},"nextItem":{"title":"Parsing null terminated key/value ASCII strings in Ruby","permalink":"/boehs.com/blog/2014/10/31/parsing-null-terminated-key-value-ascii-strings-in-ruby.html"}},"content":"I used pow in the past and didn\'t like it. I\'ve given it a second chance and it seems to be working out. I\'d like to give [Invoker](http://invoker.codemancers.com) a try though but I\'ll save that for another day.\\n\\nPow is a daemon that runs your rack (Rails) apps in the background when you request them at a special `example_app.dev` domain. You don\'t have to start your app manually anymore (e.g. `rails s`). If you don\'t use your app for 15 minutes it kills your app\'s process to free up memory (restarting it on the next request). It doesn\'t run workers (I recommend inline [que](https://github.com/chanks/que) workers via ActiveJob) or other daemons such as those in your `Procfile`. It just looks for a `config.ru` and (presumably) does a `rackup` on it. It\'s very simple to set up and it\'s Mac OS X only.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Install Pow\\n\\nBefore running the install script, configure pow to use port `3300` rather than `80`; this makes port forwarding easier and avoids unnecessary sudoing. You may prefer to skip this step or choose another port besides `3300`.\\n\\n```bash\\necho \'export POW_DST_PORT=3300\' >> ~/.powconfig\\n```\\n\\nRun the [pow](http://pow.cx) install script and configure pow to serve your app\\n\\n```bash\\ncurl get.pow.cx | sh\\ncd ~/.pow\\nln -s ~/Code/example_co/example_app # Or where ever your repo is\\n```\\n\\nEnsure your application is running:\\n\\n```bash\\nopen http://example_app.dev:3300\\n```\\n\\n## Configure SSL with tunnelss\\n\\nInstall [tunnelss](https://github.com/rchampourlier/tunnelss) on your system:\\n\\n```bash\\ngem install tunnelss\\n```\\n\\nStart tunnelss (I recommend 4430 as it does not require `sudo`):\\n\\n```bash\\ntunnelss 4430 3300 # Change port 3300 if you changed DST_PORT (80 is default)\\n```\\n\\nOpen the SSL URL to the app:\\n\\n```bash\\nopen https://example_app.dev:4430\\n```\\n\\nTrust the \\"unverified\\" self-signed certificate when prompted (should require admin password). [Screenshot for Safari](https://cloud.githubusercontent.com/assets/28198/5825515/9d33e926-a0b1-11e4-8fa2-8fb5157b2e86.png).\\n\\n### Adding the SSL certificate to iOS\\n\\n- In your shell, run `open ~/.tunnelss`.\\n- Send `cert.pem` to yourself (email/iMessage).\\n- Open the attachment on your iOS device and install the certificate (should require your pass code and warn you about it not be a verified certificate).\\n- To access your application, use [xip.io](http://xip.io). On your mac run `ipconfig getifaddr en0` to get your local IP to use in the xip.io URL (e.g. https://example\\\\_app.10.0.1.4.xip.io:4430).\\n\\nNote: If you\'re testing remotely you will need an SSH or VPN tunnel.\\n\\n## Logs, restarting, pry and misc\\n\\nLogs can be viewed in `log/development.log`. A useful alias for this is:\\n\\n```bash\\nalias devlogs=\'tail -f ~/Code/*/*/log/development.log\' # May need to change path\\n```\\n\\nRestart the application using:\\n\\n```bash\\ntouch tmp/restart.txt # Will restart on next page load\\n```\\n\\nAs usual, Rails handles much of the code reloading for you so you won\'t have to do this with every request. Just the typical reasons you\'d need to restart the server for (modifying initializers, adding gems, modifying load paths, etc).\\n\\nSince [pry](http://pryrepl.org) isn\'t connected to a tty, you won\'t be able to start a debugger from your code the normal way (`binding.pry`). [pry-remote](https://github.com/Mon-Ouie/pry-remote) has our back. Use `binding.remote_pry` in your code and then run `pry-remote`. This will attach your terminal to the pry debugging session.\\n\\n```bash\\nbinding.remote_pry # In your code\\npry-remote # In your shell\\n```\\n\\nFor memory efficiency, pow will shut down applications that are not used for some time (default is 15 minutes). Your application will take a few extra seconds to load the first time you come back to it."},{"id":"/2014/10/31/parsing-null-terminated-key-value-ascii-strings-in-ruby.html","metadata":{"permalink":"/boehs.com/blog/2014/10/31/parsing-null-terminated-key-value-ascii-strings-in-ruby.html","source":"@site/blog/2014-10-31-parsing-null-terminated-key-value-ascii-strings-in-ruby.html.md","title":"Parsing null terminated key/value ASCII strings in Ruby","description":"I\'ve recently been messing with a lot of hex thanks to my current client. I ran across a key/value hex string where each key/value pair was NULL terminated (pairs separated from other pairs with a NULL character) and each key was seperated from its value by a colon. Here\'s the hex string:","date":"2014-10-31T00:00:00.000Z","formattedDate":"October 31, 2014","tags":[],"readingTime":1.915,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"prevItem":{"title":"Configuring Pow including SSL","permalink":"/boehs.com/blog/2015/01/20/configuring-pow-including-ssl.html"},"nextItem":{"title":"Test if memcache is running and accessible","permalink":"/boehs.com/blog/2014/02/03/test-if-memcache-is-running-and-accessible.html"}},"content":"I\'ve recently been messing with a lot of hex thanks to my current client. I ran across a key/value hex string where each key/value pair was NULL terminated (pairs separated from other pairs with a NULL character) and each key was seperated from its value by a colon. Here\'s the hex string:\\n\\n```ruby\\n>> hexstr = \\"56494e3a3147314a433534343452373235323336370050524f544f3a3500504152414d533a302c312c322c342c372c392c31312c31342c323000494e44435452533a302830303030303030303030303131292c3128303131303031303131313129\\"\\n```\\n\\nFirst I wanted to convert this to ASCII, Ruby makes this fairly simple:\\n\\n\x3c!-- truncate --\x3e\\n\\n```ruby\\n>> str = [hexstr].pack \'H*\'\\n=> \\"VIN:1G1JC5444R7252367\\\\x00PROTO:5\\\\x00PARAMS:0,1,2,4,7,9,11,14,20\\\\x00INDCTRS:0(0000000000011),1(01100101111)\\"\\n```\\n\\nNow we have an ascii string with null terminators. Ruby has escape sequences like `\\\\n` for newline and `\\\\t` for tab. It also has hex escape sequences, for example the letter `a` is `\\\\x61` as `61` is its hex value. A null character is the hex value `00` so the escape sequence is `\\\\x00`. Now to break the string apart we use split:\\n\\n```ruby\\n>> kv_pairs = str.split \\"\\\\x00\\"\\n=> [\\"VIN:1G1JC5444R7252367\\", \\"PROTO:5\\", \\"PARAMS:0,1,2,4,7,9,11,14,20\\", \\"INDCTRS:0(0000000000011),1(01100101111)\\"]\\n```\\n\\nFinally, you can split these pairs into further pairs by mapping over them with split and then use Ruby\'s `Hash[]` syntax to create a hash from the array of arrays:\\n\\n```ruby\\n>> kv_pairs_array = kv_pairs.map { |key_vals| key_vals.split \':\' }\\n=> [[\\"VIN\\", \\"1G1JC5444R7252367\\"], [\\"PROTO\\", \\"5\\"], [\\"PARAMS\\", \\"0,1,2,4,7,9,11,14,20\\"], [\\"INDCTRS\\", \\"0(0000000000011),1(01100101111)\\"]]\\nobdii_info = Hash[kv_pairs_array]\\n=> {\\"VIN\\"=>\\"1G1JC5444R7252367\\", \\"PROTO\\"=>\\"5\\", \\"PARAMS\\"=>\\"0,1,2,4,7,9,11,14,20\\", \\"INDCTRS\\"=>\\"0(0000000000011),1(01100101111)\\"}\\n```\\nIf you\'re like me and don\'t like upcased strings for keys, you can symbolize the keys (thanks active support) with this oneliner (I added the downcase call to the mix):\\n\\n```ruby\\n>> obdii_info = Hash[obdii_info.map { |(k, v)| [ k.downcase.to_sym, v ] }]\\n=> {:vin=>\\"1G1JC5444R7252367\\", :proto=>\\"5\\", :params=>\\"0,1,2,4,7,9,11,14,20\\", :indctrs=>\\"0(0000000000011),1(01100101111)\\"}\\n```\\n\\nLooking nice! I\'ve made these into methods for a util class I include. Eventually I\'d like to make a special hex string class to handle this better, but for my current use case this works well.\\n\\nHere are some methods you can throw in your own class:\\n\\n```ruby\\ndef hex_to_ascii hex_string\\n  [hex_string.delete \' \'].pack \'H*\'\\nend\\n\\ndef hashify_null_term_str str\\n  Hash[str.split(\\"\\\\x00\\").map { |key_vals| key_vals.split \':\' }]\\nend\\n\\ndef symbolize_keys hash\\n  Hash[hash.map { |(k, v)| [ k.downcase.to_sym, v ] }]\\nend\\n\\n# Example usage:\\nsymbolize_keys hashify_null_term_str hex_to_ascii \\"56 49 4e 3a 00 50 52 4f 54 4f 3a 30 00 50 41 52 41 4d 53 3a\\"\\n# => { vin: nil, proto: \\"0\\", params: nil }\\n```\\n\\nHappy Hacking."},{"id":"/2014/02/03/test-if-memcache-is-running-and-accessible.html","metadata":{"permalink":"/boehs.com/blog/2014/02/03/test-if-memcache-is-running-and-accessible.html","source":"@site/blog/2014-02-03-test-if-memcache-is-running-and-accessible.html.md","title":"Test if memcache is running and accessible","description":"I\'ve been writing a Rails template for our future projects at Brightbit and I\'ve been testing everything, including our application\'s environment. I\'ve wrote a special rake task to test our different environments (development, test, staging, production, etc). This helps us ensure each environment is configured correctly. Ideally it would let the person running the tests know what is wrong with their environment and how to resolve it.","date":"2014-02-03T00:00:00.000Z","formattedDate":"February 3, 2014","tags":[],"readingTime":1.295,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"prevItem":{"title":"Parsing null terminated key/value ASCII strings in Ruby","permalink":"/boehs.com/blog/2014/10/31/parsing-null-terminated-key-value-ascii-strings-in-ruby.html"},"nextItem":{"title":"Sharing a team Heroku account","permalink":"/boehs.com/blog/2013/03/22/sharing-a-team-heroku-account.html"}},"content":"I\'ve been writing a Rails template for our future projects at [Brightbit](http://brightbit.com) and I\'ve been testing everything, including our application\'s environment. I\'ve wrote a special rake task to test our different environments (development, test, staging, production, etc). This helps us ensure each environment is configured correctly. Ideally it would let the person running the tests know what is wrong with their environment and how to resolve it.\\n\\nOne of the environment details I wanted to test was that memcache was setup and running correctly. I could of course test for the memcached binary or check if it was running, but since we are running these tests in the context of a Rails app, why not just ask Rails if it can connect to the memcache server?\\n\\n\x3c!-- truncate --\x3e\\n\\nThere\'s a multitude of ways to test for this. We don\'t have memcache setup in our test environment\'s config file, so I\'ll have to ask Rails to lookup a memcache store.  Also, I wanted to have something that would give a true/false rather than raise an exception (such as `Rails.cache.read \'some-made-up-key\'`). After poking around a bit, I found that `Rails.cache.stats` would always return something if memcache was up but have nil values in its result hash if it was down.\\n\\nSo, if you just want to check in your console, you can run:\\n\\n```ruby\\nRails.cache.stats.values.include? nil\\n```\\n\\nBut since we\'re writing a test which doesn\'t have memcache configured, we\'ll need to ask `ActiveSupport` to lookup a mem cache store:\\n\\n```ruby\\nActiveSupport::Cache.lookup_store(:mem_cache_store).stats.values.include? nil\\n```\\n\\nSo there ya go: quick and simple."},{"id":"/2013/03/22/sharing-a-team-heroku-account.html","metadata":{"permalink":"/boehs.com/blog/2013/03/22/sharing-a-team-heroku-account.html","source":"@site/blog/2013-03-22-sharing-a-team-heroku-account.html.md","title":"Sharing a team Heroku account","description":"Share a Heroku account for a single place to add/remove team members for all shared apps. Permission allocation/revocation made simple! How? Add a new key for each team member to the shared account; access app repos using the heroku-accounts plugin","date":"2013-03-22T00:00:00.000Z","formattedDate":"March 22, 2013","tags":[],"readingTime":2.66,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"prevItem":{"title":"Test if memcache is running and accessible","permalink":"/boehs.com/blog/2014/02/03/test-if-memcache-is-running-and-accessible.html"}},"content":":::tip TL;DR\\nShare a Heroku account for a single place to add/remove team members for all shared apps. Permission allocation/revocation made simple! How? Add a new key for each team member to the shared account; access app repos using the heroku-accounts plugin\\n:::\\n\\nCurrently at Brightbit there\'s 4-5 team members to add to each Heroku app. And with some projects having two, three or more apps (staging, production, splash, etc) it gets a bit cumbersome adding all of us and it will only get worse with more team mates.\\n\\n\x3c!-- truncate --\x3e\\n\\nWhat makes this problem worse is we don\'t re-bill hosting; we let our clients create an account and then they add us as collaborators. Some clients like this control, some just have us do it for them. Whatever the case, adding a single email for each app is much nicer.\\n\\nTo add to the convenience, if we want to add a team member to every Brightbit project we simply add their key to the team account. And if a team member leaves, we change the password and remove their key: instant permission revocation on every project.\\n\\nSo how do we achieve this? Open your favorite terminal and follow along.\\n\\n### Create a work account with a new key\\n\\nYou can only link an SSH key to one Heroku account at a time (how else would it know what account you were pushing from?), so you\'ll need to create a new key for your work account.\\n\\n1. Install the [Heroku accounts](http://github.com/ddollar/heroku-accounts) plugin by David Dollar:\\n\\n  ```bash\\n  heroku plugins:install git://github.com/ddollar/heroku-accounts.git\\n  ```\\n\\n2. Add a work account and login using the shared team email/password (don\'t add anything to your ssh config yet -- we\'ll get to that):\\n\\n  ```bash\\n  heroku accounts:add work\\n  ```\\n\\n3. Generate a dedicated ssh key for your work account (this is your personal key -- don\'t share this with your team):\\n\\n  ```bash\\n  ssh-keygen -f ~/.ssh/id_rsa_heroku_work\\n  ```\\n\\n4. Add your key to the team Heroku account:\\n\\n  ```bash\\n  heroku keys:add ~/.ssh/id_rsa_heroku_work.pub --account work\\n  ```\\n\\n5. Add the key to a `heroku.work` host (so you can push/pull with git):\\n\\n\\n  ```bash\\n  cat << \'EOF\' >> ~/.ssh/config\\n  Host heroku.work\\n    HostName heroku.com\\n    IdentityFile ~/.ssh/id_rsa_heroku_work\\n    IdentitiesOnly yes\\n  EOF\\n  ```\\n\\n## Change team heroku repositories\\n\\nNow to use the account you\'ll need to replace the `heroku.com` hostname with `heroku.work`. You can do this by removing and re-adding the remote or you can edit your current .git/config.\\n\\n1. Here\'s a 3 liner to modify your current .git/config that should work on any system (it would be a 1 liner if BSD and GNU sed agreed on inline replacement). You\'ll need to run it on the root of each repository:\\n\\n  ```bash\\n  TMP_FILE=$(mktemp /tmp/config.XXXXXXXXXX)\\n  sed -e \\"s/heroku.com/heroku.work/\\" .git/config > $TMP_FILE\\n  mv $TMP_FILE .git/config\\n  ```\\n\\n2. Verify it worked (you\'ll get a public key denied if it didn\'t):\\n\\n  ```bash\\n  git remote update\\n  ```\\n\\n3. You also may want to set your team repo\'s default Heroku account (you can use --global for a system-wide change):\\n\\n  ```bash\\n  git config heroku.account work\\n  ```\\n\\n## Caveats\\n* You won\'t know who deployed what when you run a `heroku releases`.\\n\\n## That\'s all, folks\\n\\nMention me on twitter ([@ericboehs](http://twitter.com/ericboehs)) if you run into any problems.\\n\\nHappy coding!"}]}')}}]);